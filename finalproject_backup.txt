import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';

import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RFID SCANNER',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: LoginPage(), // Use LoginPage as the home widget
    );
  }
}

class LoginPage extends StatelessWidget {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _usernameController,
              decoration: const InputDecoration(
                labelText: 'Username',
              ),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'Password',
              ),
              obscureText: true,
            ),
            const SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () {
                final String username = _usernameController.text.trim();
                final String password = _passwordController.text.trim();

                // Authenticate the user based on their role
                if (username == 'admin' && password == 'admin') {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AdminPage(
                        context: context,
                      ),
                    ),
                  );
                } else if (username == 'scanner' && password == 'scanner') {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => SearchPage(
                        role: '',
                      ),
                    ),
                  );
                } else {
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: const Text('Authentication Failed'),
                      content: const Text('Invalid username or password.'),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context);
                          },
                          child: const Text('OK'),
                        ),
                      ],
                    ),
                  );
                }
              },
              child: const Text('Login'),
            ),
          ],
        ),
      ),
    );
  }
}

class SearchPage extends StatefulWidget {
  final String
      role; // Add role property to differentiate between admin and scanner

  const SearchPage({required this.role});

  @override
  _SearchPageState createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  TextEditingController _searchController = TextEditingController();
  String _name = '';
  String _id = '';
  String _rfid = '';
  FocusNode _searchFocusNode = FocusNode();
  String _selectedSession = 'Morning';

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchTextChanged);
  }

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    super.dispose();
  }

  Future<void> _searchData() async {
    String searchTerm = _searchController.text.trim();
    if (searchTerm.isNotEmpty) {
      QuerySnapshot querySnapshot = await FirebaseFirestore.instance
          .collection('student_list')
          .where('rfid', isEqualTo: searchTerm)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        Map<String, dynamic>? data =
            querySnapshot.docs.first.data() as Map<String, dynamic>?;
        setState(() {
          _name = data!['name'];
          _id = data['id'];
          _rfid = data['rfid'];
        });

        QuerySnapshot existingDataSnapshot = await FirebaseFirestore.instance
            .collection('attendance')
            .where('name', isEqualTo: _name)
            .where('id', isEqualTo: _id)
            .where('rfid', isEqualTo: _rfid)
            .where('session', isEqualTo: _selectedSession)
            .get();

        if (existingDataSnapshot.docs.isEmpty) {
          await FirebaseFirestore.instance.collection('attendance').add({
            'name': _name,
            'id': _id,
            'rfid': _rfid,
            'session': _selectedSession,
            'date': DateTime.now(),
          });
        }
      } else {
        setState(() {
          _name = 'No results found.';
          _id = 'No results found.';
          _rfid = 'No results found.';
        });
      }

      _searchController.clear();
      _searchFocusNode.requestFocus();
    }
  }

  void _onSearchTextChanged() {
    // Not used in this revised version
  }

  Future<void> _deleteRecord(String id) async {
    await FirebaseFirestore.instance.collection('attendance').doc(id).delete();
  }

  void _logout() {
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => LoginPage()),
      (route) => false,
    );
  }

  void _openAdminPage() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => AdminPage(context: context),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('CMU-STORE'),
        leading: Image.network(
            'https://upload.wikimedia.org/wikipedia/en/a/a0/Central_Mindanao_University_logo.png'),
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: _logout,
          ),
          if (widget.role == 'admin') // Show the button only for admin role
            IconButton(
              icon: Icon(Icons.person_add),
              onPressed: _openAdminPage,
            ),
        ],
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextField(
                controller: _searchController,
                focusNode: _searchFocusNode,
                decoration: const InputDecoration(
                  labelText: 'Search',
                ),
                onSubmitted: (_) {
                  _searchData();
                },
              ),
              const SizedBox(height: 16.0),
              Text(
                'Name: $_name',
                style: const TextStyle(fontSize: 16.0),
              ),
              Text(
                'ID: $_id',
                style: const TextStyle(fontSize: 16.0),
              ),
              Text(
                'RFID: $_rfid',
                style: const TextStyle(fontSize: 16.0),
              ),
              const SizedBox(height: 16.0),
              Row(
                children: [
                  Text(
                    'Session: ',
                    style: const TextStyle(fontSize: 16.0),
                  ),
                  Radio<String>(
                    value: 'Morning',
                    groupValue: _selectedSession,
                    onChanged: (String? value) {
                      setState(() {
                        _selectedSession = value!;
                      });
                    },
                  ),
                  const Text('Morning'),
                  Radio<String>(
                    value: 'Afternoon',
                    groupValue: _selectedSession,
                    onChanged: (String? value) {
                      setState(() {
                        _selectedSession = value!;
                      });
                    },
                  ),
                  const Text('Afternoon'),
                ],
              ),
              if (widget.role == 'admin') // Show the table only for admin role
                const SizedBox(height: 16.0),
              StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('attendance')
                    .where('session', isEqualTo: _selectedSession)
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    List<DataRow> rows = [];
                    snapshot.data!.docs.forEach((doc) {
                      String name = doc['name'];
                      String id = doc['id'];
                      String rfid = doc['rfid'];
                      String session = _selectedSession;
                      String documentId = doc.id;

                      rows.add(DataRow(cells: [
                        DataCell(Text(name)),
                        DataCell(Text(id)),
                        DataCell(Text(rfid)),
                        DataCell(Text(session)),
                        DataCell(
                          IconButton(
                            icon: Icon(Icons.delete),
                            onPressed: () {
                              _deleteRecord(documentId);
                            },
                          ),
                        ),
                      ]));
                    });

                    return DataTable(
                      columns: const [
                        DataColumn(label: Text('Name')),
                        DataColumn(label: Text('ID')),
                        DataColumn(label: Text('RFID')),
                        DataColumn(label: Text('Session')),
                        DataColumn(label: Text('Delete')),
                      ],
                      rows: rows,
                    );
                  } else {
                    return const CircularProgressIndicator();
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class AdminPage extends StatelessWidget {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _idController = TextEditingController();
  final TextEditingController _rfidController = TextEditingController();
  final BuildContext context;

  AdminPage({required this.context});

  Future<void> _addStudent() async {
    String name = _nameController.text.trim();
    String id = _idController.text.trim();
    String rfid = _rfidController.text.trim();

    if (name.isNotEmpty && id.isNotEmpty && rfid.isNotEmpty) {
      await FirebaseFirestore.instance.collection('student_list').add({
        'name': name,
        'id': id,
        'rfid': rfid,
      });

      _nameController.clear();
      _idController.clear();
      _rfidController.clear();

      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Success'),
          content: const Text('Student added successfully.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('OK'),
            ),
          ],
        ),
      );
    } else {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Error'),
          content: const Text('Please enter all fields.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('OK'),
            ),
          ],
        ),
      );
    }
  }

  void _logout() {
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => LoginPage()),
      (route) => false,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Student'),
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: _logout,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'Name',
              ),
            ),
            TextField(
              controller: _idController,
              decoration: const InputDecoration(
                labelText: 'ID',
              ),
            ),
            TextField(
              controller: _rfidController,
              decoration: const InputDecoration(
                labelText: 'RFID',
              ),
            ),
            const SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: _addStudent,
              child: const Text('Add Student'),
            ),
          ],
        ),
      ),
    );
  }
}
